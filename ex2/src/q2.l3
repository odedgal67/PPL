(define append 
  (lambda(lst1 lst2)
    (if (eq? '() lst1)
      lst2
      (cons (car lst1) (append (cdr lst1) lst2))))
)

(define reverse 
  (lambda (lst)
    (if (eq? '() lst)
        lst
        (append (reverse (cdr lst)) (list (car lst))))
        
  )
)

(define duplicate-items
   (lambda(lst dup-count)
      (duplicate-items-helper lst dup-count 0)
   )
)

(define duplicate-items-helper
   (lambda(lst dup-count counter)
      (if (eq? '() lst)
          lst
   
          (if (not(= (car dup-count) counter))
              (cons (car lst) (duplicate-items-helper lst dup-count (+ counter 1)))
          
              (duplicate-items-helper (cdr lst) (append (cdr dup-count) (cons(car dup-count) '())) 0))
          )
     
   )
)


(define remove-duplicate
  (lambda (lst n)
  (if (eq? '() lst)
      lst
      (if (= n (car lst))
          (remove-duplicate(cdr lst) n)
          (cons (car lst) (remove-duplicate (cdr lst) n)))))) 


          
(define payment
  (lambda (n coins-lst)
    (if (< n 0) 
        0
        (if (and (= n 0) (eq? '() coins-lst)) 
            1
            (if (eq? '() coins-lst)
            0

                

            (+      (payment(- n (car coins-lst)) (cdr coins-lst))         (payment n (remove-duplicate coins-lst (car coins-lst))     )))))))
            
             
  

(define bind
  (lambda(f1 f2)
      (lambda (n)
      (f1 (f2 n)))))
   


(define compose-n
  (lambda(f n)
        (if (= n 1)
            f
           (bind (compose-n  f (- n 1)) f))
    
  )
)








